datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User{
    id String @id @default(cuid())
    name String?
    email String @unique
    password String
    role Role @default(USER)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    refreshToken String? @unique
    resetCode String?       
    resetCodeExpires DateTime?
    cart Cart?
    addresses Address[]
    orders Order[]
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  couponId      String?
  coupon        Coupon?       @relation(fields: [couponId], references: [id])
  total         Float
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([addressId])
  @@index([couponId])
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id])
  productId       String
  productName     String
  productCategory String
  quantity        Int
  size            String?
  color           String?
  price           Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model product{
    id String @id @default(cuid())
    name String?
    brand String 
    brandCategory String?
    description String
    category String 
    gender String 
    colors String[]
    sizes String[]  @default([])
    stock Int
    soldCount Int
    rating Float? 
    price Float
    images String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    productType String?
    reviews       Review[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  comment   String?
  rating    Int
  createdAt DateTime @default(now())

  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)

   @@unique([userId, productId],name: "user_product_unique")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime   @updatedAt
}




model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  quantity  Int
  size      String?
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, color])
}

model Coupon{
    id String @id @default(cuid())
    code  String @unique
    discountPercent Float 
    startDate DateTime
    endDate DateTime 
    usageLimit Int
    usageCount Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isFeatured Boolean? @default(false)

    orders Order[]
}

model FeatureBanner{
    id String @id @default(cuid())
    imageUrl String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  address    String
  city       String
  country    String
  postalCode String
  phone      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  orders Order[]

  @@index([userId])
}

enum Role{
    USER
    SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
}